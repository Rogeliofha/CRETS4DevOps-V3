# 🔧 CRETS4DevOps V3 - CI/CD Pipeline

name: Build and Package Extension

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  build:
    name: 🏗️ Build Extension
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔍 Lint Code
      run: npm run lint
      continue-on-error: true

    - name: 🏗️ Build Extension
      run: npm run build

    - name: 📋 Run Tests
      run: npm test
      continue-on-error: true

    - name: 📦 Package Extension
      run: npm run package

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-package
        path: '*.vsix'
        retention-days: 30

    - name: 📊 Upload Build Report
      uses: actions/upload-artifact@v4
      with:
        name: build-report
        path: |
          dist/
          package.json
          vss-extension.json
        retention-days: 7

  validate:
    name: ✅ Validation Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-package

    - name: 🧪 Validate Extension Package
      run: |
        echo "🔍 Validating VSIX package..."
        if [ -f *.vsix ]; then
          echo "✅ VSIX package generated successfully"
          echo "📋 Package details:"
          ls -la *.vsix
        else
          echo "❌ VSIX package not found"
          exit 1
        fi

    - name: 🔍 Check Extension Manifest
      run: |
        echo "🔍 Validating extension manifest..."
        if [ -f vss-extension.json ]; then
          echo "✅ Extension manifest found"
          echo "📋 Manifest content:"
          cat vss-extension.json | grep -E '"version"|"name"|"publisher"'
        else
          echo "❌ Extension manifest not found"
          exit 1
        fi

  release:
    name: 🚀 Release Management
    runs-on: ubuntu-latest
    needs: [build, validate]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: extension-package

    - name: 🏷️ Extract Version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "🏷️ Release version: $VERSION"

    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        VERSION=${{ steps.version.outputs.version }}
        echo "📝 Generating release notes for version $VERSION"
        
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          echo "## 🚀 CRETS4DevOps V3 - Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### 🎯 Highlights" >> release_notes.md
          echo "- ✅ Extensión Azure DevOps para gestión independiente de requisitos de sostenibilidad" >> release_notes.md
          echo "- 🔄 Sistema de comunicación multi-canal optimizado" >> release_notes.md
          echo "- 💾 Storage independiente por Work Item" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Installation" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Download and install the VSIX package" >> release_notes.md
          echo "# Or install via Azure DevOps Marketplace" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Technical Details" >> release_notes.md
          echo "- **Build**: \`npm run build\`" >> release_notes.md
          echo "- **Package**: \`npm run package\`" >> release_notes.md
          echo "- **Node**: ${{ env.NODE_VERSION }}" >> release_notes.md
          echo "- **Date**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
        fi

    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 🚀 CRETS4DevOps V3 - v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: 📤 Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: '*.vsix'
        asset_name: crets4devops-v3-${{ steps.version.outputs.version }}.vsix
        asset_content_type: application/zip

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔍 Run Security Audit
      run: |
        echo "🔍 Running security audit..."
        npm audit --audit-level=moderate
        echo "✅ Security audit completed"

    - name: 📊 Dependency Check
      run: |
        echo "📊 Checking for outdated dependencies..."
        npm outdated || true
        echo "✅ Dependency check completed"

# 📋 Workflow Status
# - ✅ Build: Compiles TypeScript and creates bundle
# - ✅ Package: Creates VSIX extension package
# - ✅ Validate: Verifies package integrity
# - ✅ Release: Automated release on version tags
# - ✅ Security: Vulnerability scanning